#!/bin/bash
#
# Raspberry Pi leds daemon
# Tested on Raspberry Pi B with Raspbian (NOT vanila)
#
# Author: Levenkov A.A. (artem@levenkov.org)
# (c) 2014 Amperka, http://www.amperka.ru/
#

PROG=$0
USAGE="$PROG"

SOCKET='/var/run/ledd.sock'
LEDSET='led_set'

LOGFILE='/var/log/ledd.log'

function first_fail {
  echo -e "$PROG error: $2" 1>&2
  exit $1
}

function fail {
    rm -f $SOCKET
    first_fail $1 $2
}

function quit {
    rm -f $SOCKET
    exit 0
}

trap "quit" SIGINT SIGTERM

mkfifo -m 777 $SOCKET

if [[ $? != 0 ]]; then
    echo "$0: Cant create IPC channel." 1>&2

    if [[ -p $SOCKET ]]; then
        echo "$0: Maybe server already started?.." 1>&2

        ping=`timeout 1 bash -c "echo ping >$SOCKET && cat $SOCKET"`

        if [[ "x$ping" == 'xpong' ]]; then
            first_fail 1 'Server already started.'
        fi

        echo 'Server not detected. Trying to use existing socket...'
    else
        first_fail 1 'Cant start server.'
    fi
fi

timeout='0.1'
blink=''
red='off'
green='off'
yellow='off'
blink_red=false
blink_yellow=false
blink_green=false

state=0

function state_set {
    state=$1

    case $state in
        'src_not_present' )
            timeout='0.1'
            green=off
            yellow=off
            blink_yellow=false
            blink_green=false
            blink_red=true
            blink=0
            ;;
        'src_present' )
            timeout='0.4'
            green=off
            red=on
            blink_yellow=true
            blink_green=false
            blink_red=false
            blink=0
            ;;
        'bad_src' )
            green=off
            yellow=off
            red=on
            blink_yellow=false
            blink_green=false
            blink_red=false
            blink=''
            ;;
        'src_making_crc' )
            timeout='0.1'
            green=off
            red=off
            blink_yellow=true
            blink_green=false
            blink_red=false
            blink=0
            ;;
        'src_ready' )
            timeout='1.0'
            yellow=off
            red=off
            blink_yellow=false
            blink_green=true
            blink_red=false
            blink=0
            ;;
        'dst_present' )
            timeout='0.5'
            yellow=off
            red=off
            blink_yellow=false
            blink_green=true
            blink_red=false
            blink=0
            ;;
        'bad_dst' )
            green=off
            yellow=off
            red=on
            blink_yellow=false
            blink_green=false
            blink_red=false
            blink=''
            ;;
        'dst_inprogress' )
            timeout='0.1'
            yellow=off
            red=off
            blink_yellow=false
            blink_green=true
            blink_red=false
            blink=0
            ;;
        'dst_write_error' )
            timeout='1.0'
            yellow=off
            red=on
            blink_yellow=false
            blink_green=true
            blink_red=false
            blink=0
            ;;
        'dst_checking' )
            timeout='0.1'
            green=on
            red=off
            blink_yellow=true
            blink_green=false
            blink_red=false
            blink=0
            ;;
        'dst_check_error' )
            green=off
            yellow=off
            red=on
            blink_yellow=false
            blink_green=false
            blink_red=false
            blink=''
            ;;
        'dst_ready' )
            green=on
            yellow=off
            red=off
            blink_yellow=false
            blink_green=false
            blink_red=false
            blink=''
            ;;
    esac
}

state_set 'src_not_present'

(
    $LEDSET red off
    $LEDSET yellow off
    $LEDSET green off

    while ((1)); do
    msg=`timeout $timeout cat $SOCKET`

    if [[ ! -z $msg ]]; then
        echo "$0: Command received: $msg"
    fi

    cmd=(${msg// / })

     #  [[ "x${cmd[1]}" =~ ^x(src_not_present|src_present|bad_src|src_ready|dst_present|bad_dst|dst_inprocess|dst_werror|dst_checking|dst_check_error|done)$ ]] &&
    if [[ "x${cmd[0]}" == 'xset_state' ]] &&
       [[ -z "${cmd[2]}" ]]; then
       state_set ${cmd[1]} 
    fi


    if [[ "x${cmd[0]}" == 'xquit' ]] &&
       [[ -z "${cmd[1]}" ]]; then

        $LEDSET red off
        $LEDSET yellow off
        $LEDSET green off

        quit

    fi

    blink=$(((blink+1)%2))

    if [[ $blink_red = true ]]; then
        $LEDSET red $blink
    else
        $LEDSET red $red
    fi

    if [[ $blink_yellow = true ]]; then
        $LEDSET yellow $blink
    else
        $LEDSET yellow $yellow
    fi

    if [[ $blink_green = true ]]; then
        $LEDSET green $blink
    else
        $LEDSET green $green
    fi
done
) </dev/null >$LOGFILE 2>&1 &
disown
